// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

private class SensoruploadRoot {
    var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(extensionRegistry)
      }
    func registerAllExtensions(registry:ExtensionRegistry) {
    }
    }

func == (lhs: SensorUpload, rhs: SensorUpload) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasHuuid == rhs.hasHuuid) && (!lhs.hasHuuid || lhs.huuid == rhs.huuid)
       fieldCheck = fieldCheck && (lhs.hasLuuid == rhs.hasLuuid) && (!lhs.hasLuuid || lhs.luuid == rhs.luuid)
       fieldCheck = fieldCheck && (lhs.hasUploadTime == rhs.hasUploadTime) && (!lhs.hasUploadTime || lhs.uploadTime == rhs.uploadTime)
       fieldCheck = fieldCheck && (lhs.hasSensorId == rhs.hasSensorId) && (!lhs.hasSensorId || lhs.sensorId == rhs.sensorId)
       fieldCheck = fieldCheck && (lhs.sensorValues == rhs.sensorValues)
       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}
class SensorUpload : GeneratedMessage {
  private(set) var hasHuuid:Bool = false
  private(set) var huuid:UInt64 = 0

  private(set) var hasLuuid:Bool = false
  private(set) var luuid:UInt64 = 0

  private(set) var hasUploadTime:Bool = false
  private(set) var uploadTime:UInt64 = 0

  private(set) var hasSensorId:Bool = false
  private(set) var sensorId:UInt64 = 0

  private(set) var sensorValues:[SensorUploadSensorData]  = [SensorUploadSensorData]()
  override init() {
       super.init()
  }
  override func isInitialized() -> Bool {
    if !hasHuuid {
      return false
    }
    if !hasLuuid {
      return false
    }
    if !hasUploadTime {
      return false
    }
    if !hasSensorId {
      return false
    }
    var isInitsensorValues:Bool = true
    for element in sensorValues {
        if (!element.isInitialized()) {
            isInitsensorValues = false
            break 
        }
    }
    if !isInitsensorValues {
     return isInitsensorValues
     }
    return true
  }
  override func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasHuuid {
      output.writeUInt64(1, value:Int64(huuid))
    }
    if hasLuuid {
      output.writeUInt64(2, value:Int64(luuid))
    }
    if hasUploadTime {
      output.writeUInt64(3, value:Int64(uploadTime))
    }
    if hasSensorId {
      output.writeUInt64(4, value:Int64(sensorId))
    }
    for element in sensorValues {
        output.writeMessage(5, value:element)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
      return size
    }

    size = 0
    if hasHuuid {
      size += WireFormat.computeUInt64Size(1, value:Int64(huuid))
    }
    if hasLuuid {
      size += WireFormat.computeUInt64Size(2, value:Int64(luuid))
    }
    if hasUploadTime {
      size += WireFormat.computeUInt64Size(3, value:Int64(uploadTime))
    }
    if hasSensorId {
      size += WireFormat.computeUInt64Size(4, value:Int64(sensorId))
    }
    for element in sensorValues {
        size += WireFormat.computeMessageSize(5, value:element)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> SensorUpload {
    return SensorUpload.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> SensorUpload {
    return SensorUpload.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> SensorUpload {
    return SensorUpload.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->SensorUpload {
    return SensorUpload.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> SensorUpload {
    return SensorUpload.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SensorUpload {
    return SensorUpload.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> SensorUploadBuilder {
    return SensorUploadBuilder()
  }
  class func builderWithPrototype(prototype:SensorUpload) -> SensorUploadBuilder {
    return SensorUpload.builder().mergeFrom(prototype)
  }
  func builder() -> SensorUploadBuilder {
    return SensorUpload.builder()
  }
  func toBuilder() -> SensorUploadBuilder {
    return SensorUpload.builderWithPrototype(self)
  }
  override func writeDescriptionTo(inout output:String, indent:String) {
    if hasHuuid {
      output += "\(indent) huuid: \(huuid) \n"
    }
    if hasLuuid {
      output += "\(indent) luuid: \(luuid) \n"
    }
    if hasUploadTime {
      output += "\(indent) uploadTime: \(uploadTime) \n"
    }
    if hasSensorId {
      output += "\(indent) sensorId: \(sensorId) \n"
    }
    var sensorValuesElementIndex:Int = 0
    for element in sensorValues {
        output += "\(indent) sensorValues[\(sensorValuesElementIndex)] {\n"
        element.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        sensorValuesElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override var hashValue:Int {
   get {
        var hashCode:Int = 7
        if hasHuuid {
           hashCode = (hashCode &* 31) &+ huuid.hashValue
        }
        if hasLuuid {
           hashCode = (hashCode &* 31) &+ luuid.hashValue
        }
        if hasUploadTime {
           hashCode = (hashCode &* 31) &+ uploadTime.hashValue
        }
        if hasSensorId {
           hashCode = (hashCode &* 31) &+ sensorId.hashValue
        }
        for element in sensorValues {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
        return hashCode
      }
    }
  }

  func == (lhs: SensorUploadSensorData, rhs: SensorUploadSensorData) -> Bool {
        if (lhs === rhs) {
          return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasRecordTime == rhs.hasRecordTime) && (!lhs.hasRecordTime || lhs.recordTime == rhs.recordTime)
         fieldCheck = fieldCheck && (lhs.valueBool == rhs.valueBool)
         fieldCheck = fieldCheck && (lhs.valueInt32 == rhs.valueInt32)
         fieldCheck = fieldCheck && (lhs.valueInt64 == rhs.valueInt64)
         fieldCheck = fieldCheck && (lhs.valueFloat == rhs.valueFloat)
         fieldCheck = fieldCheck && (lhs.valueDouble == rhs.valueDouble)
         fieldCheck = fieldCheck && (lhs.valueString == rhs.valueString)
         return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  }
  class SensorUploadSensorData : GeneratedMessage {
    private(set) var hasRecordTime:Bool = false
    private(set) var recordTime:UInt64 = 0

    private(set) var valueBool:[Bool] = [Bool]()
    private var valueBoolMemoizedSerializedSize:Int32 = -1
    private(set) var valueInt32:[Int32] = [Int32]()
    private var valueInt32MemoizedSerializedSize:Int32 = -1
    private(set) var valueInt64:[Int64] = [Int64]()
    private var valueInt64MemoizedSerializedSize:Int32 = -1
    private(set) var valueFloat:[Float] = [Float]()
    private var valueFloatMemoizedSerializedSize:Int32 = -1
    private(set) var valueDouble:[Double] = [Double]()
    private var valueDoubleMemoizedSerializedSize:Int32 = -1
    private(set) var valueString:[String] = [String]()
    override init() {
         super.init()
    }
    override func isInitialized() -> Bool {
      if !hasRecordTime {
        return false
      }
      return true
    }
    override func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasRecordTime {
        output.writeUInt64(1, value:Int64(recordTime))
      }
      if !valueBool.isEmpty {
        output.writeRawVarint32(18)
        output.writeRawVarint32(valueBoolMemoizedSerializedSize)
        for value in valueBool {
          output.writeBoolNoTag(value)
        }
      }
      if !valueInt32.isEmpty {
        output.writeRawVarint32(26)
        output.writeRawVarint32(valueInt32MemoizedSerializedSize)
        for value in valueInt32 {
          output.writeInt32NoTag(value)
        }
      }
      if !valueInt64.isEmpty {
        output.writeRawVarint32(34)
        output.writeRawVarint32(valueInt64MemoizedSerializedSize)
        for value in valueInt64 {
          output.writeInt64NoTag(value)
        }
      }
      if !valueFloat.isEmpty {
        output.writeRawVarint32(42)
        output.writeRawVarint32(valueFloatMemoizedSerializedSize)
        for value in valueFloat {
          output.writeFloatNoTag(value)
        }
      }
      if !valueDouble.isEmpty {
        output.writeRawVarint32(50)
        output.writeRawVarint32(valueDoubleMemoizedSerializedSize)
        for value in valueDouble {
          output.writeDoubleNoTag(value)
        }
      }
      if !valueString.isEmpty {
        for value in valueString {
          output.writeString(7, value:value)
        }
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override func serializedSize() -> Int32 {
      var size:Int32 = memoizedSerializedSize
      if size != -1 {
        return size
      }

      size = 0
      if hasRecordTime {
        size += WireFormat.computeUInt64Size(1, value:Int64(recordTime))
      }
        var dataSizeValueBool:Int32 = 0
        dataSizeValueBool = 1 * Int32(valueBool.count)
        size += dataSizeValueBool
        if !valueBool.isEmpty {
          size += 1
          size += WireFormat.computeInt32SizeNoTag(dataSizeValueBool)
        }
        valueBoolMemoizedSerializedSize = dataSizeValueBool
        var dataSizeValueInt32:Int32 = 0
        for element in valueInt32 {
            dataSizeValueInt32 += WireFormat.computeInt32SizeNoTag(element)
        }
        size += dataSizeValueInt32
        if !valueInt32.isEmpty {
          size += 1
          size += WireFormat.computeInt32SizeNoTag(dataSizeValueInt32)
        }
        valueInt32MemoizedSerializedSize = dataSizeValueInt32
        var dataSizeValueInt64:Int32 = 0
        for element in valueInt64 {
            dataSizeValueInt64 += WireFormat.computeInt64SizeNoTag(element)
        }
        size += dataSizeValueInt64
        if !valueInt64.isEmpty {
          size += 1
          size += WireFormat.computeInt32SizeNoTag(dataSizeValueInt64)
        }
        valueInt64MemoizedSerializedSize = dataSizeValueInt64
        var dataSizeValueFloat:Int32 = 0
        dataSizeValueFloat = 4 * Int32(valueFloat.count)
        size += dataSizeValueFloat
        if !valueFloat.isEmpty {
          size += 1
          size += WireFormat.computeInt32SizeNoTag(dataSizeValueFloat)
        }
        valueFloatMemoizedSerializedSize = dataSizeValueFloat
        var dataSizeValueDouble:Int32 = 0
        dataSizeValueDouble = 8 * Int32(valueDouble.count)
        size += dataSizeValueDouble
        if !valueDouble.isEmpty {
          size += 1
          size += WireFormat.computeInt32SizeNoTag(dataSizeValueDouble)
        }
        valueDoubleMemoizedSerializedSize = dataSizeValueDouble
        var dataSizeValueString:Int32 = 0
        for element in valueString {
            dataSizeValueString += WireFormat.computeStringSizeNoTag(element)
        }
        size += dataSizeValueString
        size += 1 * Int32(valueString.count)
      size += unknownFields.serializedSize()
      memoizedSerializedSize = size
      return size
    }
    class func parseFromData(data:[Byte]) -> SensorUploadSensorData {
      return SensorUploadSensorData.builder().mergeFromData(data).build()
    }
    class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> SensorUploadSensorData {
      return SensorUploadSensorData.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    class func parseFromInputStream(input:NSInputStream) -> SensorUploadSensorData {
      return SensorUploadSensorData.builder().mergeFromInputStream(input).build()
    }
    class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->SensorUploadSensorData {
      return SensorUploadSensorData.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    class func parseFromCodedInputStream(input:CodedInputStream) -> SensorUploadSensorData {
      return SensorUploadSensorData.builder().mergeFromCodedInputStream(input).build()
    }
    class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SensorUploadSensorData {
      return SensorUploadSensorData.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    class func builder() -> SensorUploadSensorDataBuilder {
      return SensorUploadSensorDataBuilder()
    }
    class func builderWithPrototype(prototype:SensorUploadSensorData) -> SensorUploadSensorDataBuilder {
      return SensorUploadSensorData.builder().mergeFrom(prototype)
    }
    func builder() -> SensorUploadSensorDataBuilder {
      return SensorUploadSensorData.builder()
    }
    func toBuilder() -> SensorUploadSensorDataBuilder {
      return SensorUploadSensorData.builderWithPrototype(self)
    }
    override func writeDescriptionTo(inout output:String, indent:String) {
      if hasRecordTime {
        output += "\(indent) recordTime: \(recordTime) \n"
      }
      var valueBoolElementIndex:Int = 0
      for element in valueBool  {
          output += "\(indent) valueBool[\(valueBoolElementIndex)]: \(element)\n"
          valueBoolElementIndex++
      }
      var valueInt32ElementIndex:Int = 0
      for element in valueInt32  {
          output += "\(indent) valueInt32[\(valueInt32ElementIndex)]: \(element)\n"
          valueInt32ElementIndex++
      }
      var valueInt64ElementIndex:Int = 0
      for element in valueInt64  {
          output += "\(indent) valueInt64[\(valueInt64ElementIndex)]: \(element)\n"
          valueInt64ElementIndex++
      }
      var valueFloatElementIndex:Int = 0
      for element in valueFloat  {
          output += "\(indent) valueFloat[\(valueFloatElementIndex)]: \(element)\n"
          valueFloatElementIndex++
      }
      var valueDoubleElementIndex:Int = 0
      for element in valueDouble  {
          output += "\(indent) valueDouble[\(valueDoubleElementIndex)]: \(element)\n"
          valueDoubleElementIndex++
      }
      var valueStringElementIndex:Int = 0
      for element in valueString  {
          output += "\(indent) valueString[\(valueStringElementIndex)]: \(element)\n"
          valueStringElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override var hashValue:Int {
     get {
          var hashCode:Int = 7
          if hasRecordTime {
             hashCode = (hashCode &* 31) &+ recordTime.hashValue
          }
          for element in valueBool {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          for element in valueInt32 {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          for element in valueInt64 {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          for element in valueFloat {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          for element in valueDouble {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          for element in valueString {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
        }
      }
    }

    class SensorUploadSensorDataBuilder : GeneratedMessageBuilder {
    private var result:SensorUploadSensorData

    override init () {
       result = SensorUploadSensorData()
    }
    var hasRecordTime:Bool {
         get {
              return result.hasRecordTime
         }
    }
    var recordTime:UInt64 {
         get {
              return result.recordTime
         }
         set (value) {
             result.hasRecordTime = true
             result.recordTime = value
         }
    }
    func clearRecordTime() -> SensorUploadSensorDataBuilder{
         result.hasRecordTime = false
         result.recordTime = 0
         return self
    }
    var valueBool:[Bool] {
         get {
             return result.valueBool
         }
         set (array) {
             result.valueBool = array
         }
    }
    func clearValueBool() -> SensorUploadSensorDataBuilder {
       result.valueBool.removeAll(keepCapacity: false)
       return self
    }
    var valueInt32:[Int32] {
         get {
             return result.valueInt32
         }
         set (array) {
             result.valueInt32 = array
         }
    }
    func clearValueInt32() -> SensorUploadSensorDataBuilder {
       result.valueInt32.removeAll(keepCapacity: false)
       return self
    }
    var valueInt64:[Int64] {
         get {
             return result.valueInt64
         }
         set (array) {
             result.valueInt64 = array
         }
    }
    func clearValueInt64() -> SensorUploadSensorDataBuilder {
       result.valueInt64.removeAll(keepCapacity: false)
       return self
    }
    var valueFloat:[Float] {
         get {
             return result.valueFloat
         }
         set (array) {
             result.valueFloat = array
         }
    }
    func clearValueFloat() -> SensorUploadSensorDataBuilder {
       result.valueFloat.removeAll(keepCapacity: false)
       return self
    }
    var valueDouble:[Double] {
         get {
             return result.valueDouble
         }
         set (array) {
             result.valueDouble = array
         }
    }
    func clearValueDouble() -> SensorUploadSensorDataBuilder {
       result.valueDouble.removeAll(keepCapacity: false)
       return self
    }
    var valueString:[String] {
         get {
             return result.valueString
         }
         set (array) {
             result.valueString = array
         }
    }
    func clearValueString() -> SensorUploadSensorDataBuilder {
       result.valueString.removeAll(keepCapacity: false)
       return self
    }
    override var internalGetResult:GeneratedMessage {
         get {
            return result
         }
    }
    override func clear() -> SensorUploadSensorDataBuilder {
      result = SensorUploadSensorData()
      return self
    }
    override func clone() -> SensorUploadSensorDataBuilder {
      return SensorUploadSensorData.builderWithPrototype(result)
    }
    func build() -> SensorUploadSensorData {
         checkInitialized()
         return buildPartial()
    }
    func buildPartial() -> SensorUploadSensorData {
      var returnMe:SensorUploadSensorData = result
      return returnMe
    }
    func mergeFrom(other:SensorUploadSensorData) -> SensorUploadSensorDataBuilder {
      if (other == SensorUploadSensorData()) {
        return self
      }
      if other.hasRecordTime {
           recordTime = other.recordTime
      }
      if !other.valueBool.isEmpty {
          result.valueBool += other.valueBool
      }
      if !other.valueInt32.isEmpty {
          result.valueInt32 += other.valueInt32
      }
      if !other.valueInt64.isEmpty {
          result.valueInt64 += other.valueInt64
      }
      if !other.valueFloat.isEmpty {
          result.valueFloat += other.valueFloat
      }
      if !other.valueDouble.isEmpty {
          result.valueDouble += other.valueDouble
      }
      if !other.valueString.isEmpty {
          result.valueString += other.valueString
      }
        mergeUnknownFields(other.unknownFields)
      return self
    }
    override func mergeFromCodedInputStream(input:CodedInputStream) ->SensorUploadSensorDataBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SensorUploadSensorDataBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag:Int32 = input.readTag()
          if tag == 0 {
               self.unknownFields = unknownFieldsBuilder.build()
               return self}
          else if tag == 8 {
            recordTime = input.readUInt64()
          }
          else if tag == 18 {
            var length:Int32 = input.readRawVarint32()
            var limit:Int32 = input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              result.valueBool += [input.readBool()]
            }
            input.popLimit(limit)
          }
          else if tag == 26 {
            var length:Int32 = input.readRawVarint32()
            var limit:Int32 = input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              result.valueInt32 += [input.readInt32()]
            }
            input.popLimit(limit)
          }
          else if tag == 34 {
            var length:Int32 = input.readRawVarint32()
            var limit:Int32 = input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              result.valueInt64 += [input.readInt64()]
            }
            input.popLimit(limit)
          }
          else if tag == 42 {
            var length:Int32 = input.readRawVarint32()
            var limit:Int32 = input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              result.valueFloat += [input.readFloat()]
            }
            input.popLimit(limit)
          }
          else if tag == 50 {
            var length:Int32 = input.readRawVarint32()
            var limit:Int32 = input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              result.valueDouble += [input.readDouble()]
            }
            input.popLimit(limit)
          }
         /* IF YOU RE-ENABLE STRINGS, UNCOMMENT: else if tag == 58 {
            valueString += [input.readString()]
          }
         */
          else {
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                    unknownFields = unknownFieldsBuilder.build()
                    return self
                }
          }
          }
       }
    }

    class SensorUploadBuilder : GeneratedMessageBuilder {
    private var result:SensorUpload

    override init () {
       result = SensorUpload()
    }
    var hasHuuid:Bool {
         get {
              return result.hasHuuid
         }
    }
    var huuid:UInt64 {
         get {
              return result.huuid
         }
         set (value) {
             result.hasHuuid = true
             result.huuid = value
         }
    }
    func clearHuuid() -> SensorUploadBuilder{
         result.hasHuuid = false
         result.huuid = 0
         return self
    }
    var hasLuuid:Bool {
         get {
              return result.hasLuuid
         }
    }
    var luuid:UInt64 {
         get {
              return result.luuid
         }
         set (value) {
             result.hasLuuid = true
             result.luuid = value
         }
    }
    func clearLuuid() -> SensorUploadBuilder{
         result.hasLuuid = false
         result.luuid = 0
         return self
    }
    var hasUploadTime:Bool {
         get {
              return result.hasUploadTime
         }
    }
    var uploadTime:UInt64 {
         get {
              return result.uploadTime
         }
         set (value) {
             result.hasUploadTime = true
             result.uploadTime = value
         }
    }
    func clearUploadTime() -> SensorUploadBuilder{
         result.hasUploadTime = false
         result.uploadTime = 0
         return self
    }
    var hasSensorId:Bool {
         get {
              return result.hasSensorId
         }
    }
    var sensorId:UInt64 {
         get {
              return result.sensorId
         }
         set (value) {
             result.hasSensorId = true
             result.sensorId = value
         }
    }
    func clearSensorId() -> SensorUploadBuilder{
         result.hasSensorId = false
         result.sensorId = 0
         return self
    }
    var sensorValues:[SensorUploadSensorData] {
         get {
             return result.sensorValues
         }
         set (value) {
             result.sensorValues = value
         }
    }
    func clearSensorValues() -> SensorUploadBuilder {
      result.sensorValues.removeAll(keepCapacity: false)
      return self
    }
    override var internalGetResult:GeneratedMessage {
         get {
            return result
         }
    }
    override func clear() -> SensorUploadBuilder {
      result = SensorUpload()
      return self
    }
    override func clone() -> SensorUploadBuilder {
      return SensorUpload.builderWithPrototype(result)
    }
    func build() -> SensorUpload {
         checkInitialized()
         return buildPartial()
    }
    func buildPartial() -> SensorUpload {
      var returnMe:SensorUpload = result
      return returnMe
    }
    func mergeFrom(other:SensorUpload) -> SensorUploadBuilder {
      if (other == SensorUpload()) {
        return self
      }
      if other.hasHuuid {
           huuid = other.huuid
      }
      if other.hasLuuid {
           luuid = other.luuid
      }
      if other.hasUploadTime {
           uploadTime = other.uploadTime
      }
      if other.hasSensorId {
           sensorId = other.sensorId
      }
      if !other.sensorValues.isEmpty  {
         result.sensorValues += other.sensorValues
      }
        mergeUnknownFields(other.unknownFields)
      return self
    }
    override func mergeFromCodedInputStream(input:CodedInputStream) ->SensorUploadBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SensorUploadBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag:Int32 = input.readTag()
          if tag == 0 {
               self.unknownFields = unknownFieldsBuilder.build()
               return self}
          else if tag == 8 {
            huuid = input.readUInt64()
          }
          else if tag == 16 {
            luuid = input.readUInt64()
          }
          else if tag == 24 {
            uploadTime = input.readUInt64()
          }
          else if tag == 32 {
            sensorId = input.readUInt64()
          }
          else if tag == 42 {
            var subBuilder = SensorUploadSensorData.builder()
            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            sensorValues += [subBuilder.buildPartial()]
          }
          else {
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                    unknownFields = unknownFieldsBuilder.build()
                    return self
                }
          }
          }
       }
    }


    // @@protoc_insertion_point(global_scope)
