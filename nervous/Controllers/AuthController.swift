//
//  AuthController.swift
//  nervousnet-iOS
//
//  Created by __DEVNAME__ on 04 Mar 2016.
//  Copyright (c) 2016 ETHZ . All rights reserved.
//
//WARNING - THIS CODE IS AUTOGENERATED BY DEVSKETCH AND CAN BE OVERWRITTEN


import Foundation
import CoreData
import UIKit

class AuthController : NSObject {
    
    let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate
    var managedContext : NSManagedObjectContext
    
    
    
    override init(){
        managedContext = appDelegate.managedObjectContext
        
        
    }
    
    //Checks the Permissions of a given App and returns them as a [Bool] in alphabetical order. Authentication is done through a UInt64 Token
    
    func checkAppPermissions (token:UInt64, appname:String, acccaccess:Bool = false, bataccess:Bool = false, gyraccess:Bool = false, magaccess:Bool = false, proxaccess:Bool = false) -> [Bool] {
        
        
        //Check whether permission has already been granted
        let fetchRequestExisting = NSFetchRequest(entityName: "AxonPermissionList")
        
        do {
            let results =
                try managedContext.executeFetchRequest(fetchRequestExisting)
            let listof = results as! [NSManagedObject]
            for ress in listof {
                if (ress.valueForKey("axonName") as! String == appname && ress.valueForKey("token") as! UInt64 == token){
                    var resultStorage : [Bool] = []
                    
                    if acccaccess   {
                        if ress.valueForKey("hasAccelerometerAccess") as! Bool{
                            resultStorage.append(ress.valueForKey("hasAccelerometerAccess") as! Bool)
                        }
                        else if (requestUserPermission(appname, permissionWanted: "Accelerometer")){
                            resultStorage.append(true)
                        }
                        else {resultStorage.append(false)
                        }
                        
                    }
                    
                    
                    if bataccess   {
                        if ress.valueForKey("hasBatteryAccess") as! Bool{
                            resultStorage.append(ress.valueForKey("hasBatteryAccess") as! Bool)
                        }
                        else if (requestUserPermission(appname, permissionWanted: "Battery")){
                            resultStorage.append(true)
                        }
                        else {resultStorage.append(false)
                        }

                        
                    }
                    if gyraccess   {
                        if ress.valueForKey("hasGyroscopeAccess") as! Bool{
                            resultStorage.append(ress.valueForKey("hasGyroscopeAccess") as! Bool)
                        }
                        else if (requestUserPermission(appname, permissionWanted: "Gyroscope")){
                            resultStorage.append(true)
                        }
                        else {resultStorage.append(false)
                        }

                        
                    }
                    if magaccess   {
                        if ress.valueForKey("hasMagnetometerAccess") as! Bool{
                            resultStorage.append(ress.valueForKey("hasMagnetometerAccess") as! Bool)
                        }
                        else if (requestUserPermission(appname, permissionWanted: "Magentometer")){
                            resultStorage.append(true)
                        }
                        else {resultStorage.append(false)
                        }

                    }
                    
                    if proxaccess   {
                        if ress.valueForKey("hasProximityAccess") as! Bool{
                            resultStorage.append(ress.valueForKey("hasProximityAccess") as! Bool)
                        }
                        else if (requestUserPermission(appname, permissionWanted: "Proximity")){
                            resultStorage.append(true)
                        }
                        else {resultStorage.append(false)
                        }

                    }
                    
                    
                    //
                }
                
            }
            
        } catch let error as NSError {
            print("Could not fetch \(error), \(error.userInfo)")
        }
        
        
        
        
        
        
        //sample
        
        //write
        let entity = NSEntityDescription.entityForName("AxonPermissionList", inManagedObjectContext: managedContext)
        let permissionsList = NSManagedObject(entity: entity!, insertIntoManagedObjectContext: managedContext)
        permissionsList.setValue( NSDate().timeIntervalSince1970.description, forKey: "axonName")
        do {
            try managedContext.save()
        } catch let error as NSError  {
            print("Could not save \(error), \(error.userInfo)")
        }
        
        //readit
        let fetchRequest = NSFetchRequest(entityName: "AxonPermissionList")
        
        do {
            let results =
                try managedContext.executeFetchRequest(fetchRequest)
            let listof = results as! [NSManagedObject]
            for ress in listof {
                NSLog(ress.valueForKey("axonName") as! String)
                
            }
            
        } catch let error as NSError {
            print("Could not fetch \(error), \(error.userInfo)")
        }
        
        let retrieved = getExistingPermissiondf("1460030317.29031", token: UInt64.max)
        retrieved?.setValue("this changed and is no longer 1458853566.13866", forKey: "axonName")
        do {
            try managedContext.save()
        } catch let error as NSError  {
            print("Could not save \(error), \(error.userInfo)")
        }
        
        
        //just read it out agoin
        NSLog("_______________")
        do {
            let results =
                try managedContext.executeFetchRequest(fetchRequest)
            let listof = results as! [NSManagedObject]
            for ress in listof {
                NSLog(ress.valueForKey("axonName") as! String)
                
            }
            
        } catch let error as NSError {
            print("Could not fetch \(error), \(error.userInfo)")
        }
        
        return [false]
        
    }
    
    
    /// Can be called by the UI settings.
    
    func changeAppPermissions() {
        
    }
    
    private func getExistingPermissiondf (axonname : String, token : UInt64)  -> NSManagedObject? {
        
        var retObj : NSManagedObject?
        let fetchRequest = NSFetchRequest(entityName: "AxonPermissionList")
        do {
            let results =
                try managedContext.executeFetchRequest(fetchRequest)
            let listof = results as! [NSManagedObject]
            for ress in listof {
                if ( (ress.valueForKey("axonName") as! String) == axonname){ //&&  ress.valueForKey("token") as! UInt64 == token){
                    retObj = ress
                    break
                }
                
            }
            
        } catch let error as NSError {
            print("Could not fetch \(error), \(error.userInfo)")
        }
        
        return retObj
        
    }
    
    func requestUserPermission (appname:String, permissionWanted: String) -> Bool{
        
        return false
    }
}

